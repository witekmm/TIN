// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Message.proto

#ifndef PROTOBUF_INCLUDED_Message_2eproto
#define PROTOBUF_INCLUDED_Message_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Message_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_Message_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_Message_2eproto();
namespace Message {
class Person;
class PersonDefaultTypeInternal;
extern PersonDefaultTypeInternal _Person_default_instance_;
}  // namespace Message
namespace google {
namespace protobuf {
template<> ::Message::Person* Arena::CreateMaybeMessage<::Message::Person>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace Message {

enum Person_messageType {
  Person_messageType_LOGIN = 0,
  Person_messageType_PASSWORD = 1,
  Person_messageType_MSG = 2,
  Person_messageType_COMMAND = 3
};
bool Person_messageType_IsValid(int value);
const Person_messageType Person_messageType_messageType_MIN = Person_messageType_LOGIN;
const Person_messageType Person_messageType_messageType_MAX = Person_messageType_COMMAND;
const int Person_messageType_messageType_ARRAYSIZE = Person_messageType_messageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Person_messageType_descriptor();
inline const ::std::string& Person_messageType_Name(Person_messageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Person_messageType_descriptor(), value);
}
inline bool Person_messageType_Parse(
    const ::std::string& name, Person_messageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Person_messageType>(
    Person_messageType_descriptor(), name, value);
}
// ===================================================================

class Person :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Message.Person) */ {
 public:
  Person();
  virtual ~Person();

  Person(const Person& from);

  inline Person& operator=(const Person& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Person(Person&& from) noexcept
    : Person() {
    *this = ::std::move(from);
  }

  inline Person& operator=(Person&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Person& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Person* internal_default_instance() {
    return reinterpret_cast<const Person*>(
               &_Person_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Person* other);
  friend void swap(Person& a, Person& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Person* New() const final {
    return CreateMaybeMessage<Person>(nullptr);
  }

  Person* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Person>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Person& from);
  void MergeFrom(const Person& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Person* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Person_messageType messageType;
  static const messageType LOGIN =
    Person_messageType_LOGIN;
  static const messageType PASSWORD =
    Person_messageType_PASSWORD;
  static const messageType MSG =
    Person_messageType_MSG;
  static const messageType COMMAND =
    Person_messageType_COMMAND;
  static inline bool messageType_IsValid(int value) {
    return Person_messageType_IsValid(value);
  }
  static const messageType messageType_MIN =
    Person_messageType_messageType_MIN;
  static const messageType messageType_MAX =
    Person_messageType_messageType_MAX;
  static const int messageType_ARRAYSIZE =
    Person_messageType_messageType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  messageType_descriptor() {
    return Person_messageType_descriptor();
  }
  static inline const ::std::string& messageType_Name(messageType value) {
    return Person_messageType_Name(value);
  }
  static inline bool messageType_Parse(const ::std::string& name,
      messageType* value) {
    return Person_messageType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string content = 1;
  bool has_content() const;
  void clear_content();
  static const int kContentFieldNumber = 1;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // required .Message.Person.messageType type = 2 [default = MSG];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::Message::Person_messageType type() const;
  void set_type(::Message::Person_messageType value);

  // @@protoc_insertion_point(class_scope:Message.Person)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  int type_;
  friend struct ::TableStruct_Message_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Person

// required string content = 1;
inline bool Person::has_content() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Person::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& Person::content() const {
  // @@protoc_insertion_point(field_get:Message.Person.content)
  return content_.GetNoArena();
}
inline void Person::set_content(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Message.Person.content)
}
#if LANG_CXX11
inline void Person::set_content(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Message.Person.content)
}
#endif
inline void Person::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Message.Person.content)
}
inline void Person::set_content(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Message.Person.content)
}
inline ::std::string* Person::mutable_content() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:Message.Person.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Person::release_content() {
  // @@protoc_insertion_point(field_release:Message.Person.content)
  if (!has_content()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return content_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Person::set_allocated_content(::std::string* content) {
  if (content != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:Message.Person.content)
}

// required .Message.Person.messageType type = 2 [default = MSG];
inline bool Person::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Person::clear_type() {
  type_ = 2;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::Message::Person_messageType Person::type() const {
  // @@protoc_insertion_point(field_get:Message.Person.type)
  return static_cast< ::Message::Person_messageType >(type_);
}
inline void Person::set_type(::Message::Person_messageType value) {
  assert(::Message::Person_messageType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  type_ = value;
  // @@protoc_insertion_point(field_set:Message.Person.type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Message

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Message::Person_messageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Message::Person_messageType>() {
  return ::Message::Person_messageType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_Message_2eproto
