// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Message.proto

#ifndef PROTOBUF_INCLUDED_Message_2eproto
#define PROTOBUF_INCLUDED_Message_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Message_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_Message_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_Message_2eproto();
namespace Message {
class ClientMessage;
class ClientMessageDefaultTypeInternal;
extern ClientMessageDefaultTypeInternal _ClientMessage_default_instance_;
}  // namespace Message
namespace google {
namespace protobuf {
template<> ::Message::ClientMessage* Arena::CreateMaybeMessage<::Message::ClientMessage>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace Message {

enum ClientMessage_messageTypes {
  ClientMessage_messageTypes_AUTHORIZATION = 0,
  ClientMessage_messageTypes_COMMAND = 1,
  ClientMessage_messageTypes_GROUP = 2
};
bool ClientMessage_messageTypes_IsValid(int value);
const ClientMessage_messageTypes ClientMessage_messageTypes_messageTypes_MIN = ClientMessage_messageTypes_AUTHORIZATION;
const ClientMessage_messageTypes ClientMessage_messageTypes_messageTypes_MAX = ClientMessage_messageTypes_GROUP;
const int ClientMessage_messageTypes_messageTypes_ARRAYSIZE = ClientMessage_messageTypes_messageTypes_MAX + 1;

const ::google::protobuf::EnumDescriptor* ClientMessage_messageTypes_descriptor();
inline const ::std::string& ClientMessage_messageTypes_Name(ClientMessage_messageTypes value) {
  return ::google::protobuf::internal::NameOfEnum(
    ClientMessage_messageTypes_descriptor(), value);
}
inline bool ClientMessage_messageTypes_Parse(
    const ::std::string& name, ClientMessage_messageTypes* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ClientMessage_messageTypes>(
    ClientMessage_messageTypes_descriptor(), name, value);
}
enum ClientMessage_groupActionTypes {
  ClientMessage_groupActionTypes_MESSAGE = 0,
  ClientMessage_groupActionTypes_CREATE = 1,
  ClientMessage_groupActionTypes_DELETE = 2,
  ClientMessage_groupActionTypes_REQUEST = 3,
  ClientMessage_groupActionTypes_ACCEPT = 4,
  ClientMessage_groupActionTypes_DECLINE = 5,
  ClientMessage_groupActionTypes_LEAVE = 6
};
bool ClientMessage_groupActionTypes_IsValid(int value);
const ClientMessage_groupActionTypes ClientMessage_groupActionTypes_groupActionTypes_MIN = ClientMessage_groupActionTypes_MESSAGE;
const ClientMessage_groupActionTypes ClientMessage_groupActionTypes_groupActionTypes_MAX = ClientMessage_groupActionTypes_LEAVE;
const int ClientMessage_groupActionTypes_groupActionTypes_ARRAYSIZE = ClientMessage_groupActionTypes_groupActionTypes_MAX + 1;

const ::google::protobuf::EnumDescriptor* ClientMessage_groupActionTypes_descriptor();
inline const ::std::string& ClientMessage_groupActionTypes_Name(ClientMessage_groupActionTypes value) {
  return ::google::protobuf::internal::NameOfEnum(
    ClientMessage_groupActionTypes_descriptor(), value);
}
inline bool ClientMessage_groupActionTypes_Parse(
    const ::std::string& name, ClientMessage_groupActionTypes* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ClientMessage_groupActionTypes>(
    ClientMessage_groupActionTypes_descriptor(), name, value);
}
enum ClientMessage_authorizationTypes {
  ClientMessage_authorizationTypes_LOG_IN = 0,
  ClientMessage_authorizationTypes_REGISTER_LOGIN = 1,
  ClientMessage_authorizationTypes_REGISTER_PASSWORD = 2,
  ClientMessage_authorizationTypes_INCORRECT = 3,
  ClientMessage_authorizationTypes_CORRECT = 4
};
bool ClientMessage_authorizationTypes_IsValid(int value);
const ClientMessage_authorizationTypes ClientMessage_authorizationTypes_authorizationTypes_MIN = ClientMessage_authorizationTypes_LOG_IN;
const ClientMessage_authorizationTypes ClientMessage_authorizationTypes_authorizationTypes_MAX = ClientMessage_authorizationTypes_CORRECT;
const int ClientMessage_authorizationTypes_authorizationTypes_ARRAYSIZE = ClientMessage_authorizationTypes_authorizationTypes_MAX + 1;

const ::google::protobuf::EnumDescriptor* ClientMessage_authorizationTypes_descriptor();
inline const ::std::string& ClientMessage_authorizationTypes_Name(ClientMessage_authorizationTypes value) {
  return ::google::protobuf::internal::NameOfEnum(
    ClientMessage_authorizationTypes_descriptor(), value);
}
inline bool ClientMessage_authorizationTypes_Parse(
    const ::std::string& name, ClientMessage_authorizationTypes* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ClientMessage_authorizationTypes>(
    ClientMessage_authorizationTypes_descriptor(), name, value);
}
enum ClientMessage_commandTypes {
  ClientMessage_commandTypes_EXIT = 0,
  ClientMessage_commandTypes_LOG_OUT = 1
};
bool ClientMessage_commandTypes_IsValid(int value);
const ClientMessage_commandTypes ClientMessage_commandTypes_commandTypes_MIN = ClientMessage_commandTypes_EXIT;
const ClientMessage_commandTypes ClientMessage_commandTypes_commandTypes_MAX = ClientMessage_commandTypes_LOG_OUT;
const int ClientMessage_commandTypes_commandTypes_ARRAYSIZE = ClientMessage_commandTypes_commandTypes_MAX + 1;

const ::google::protobuf::EnumDescriptor* ClientMessage_commandTypes_descriptor();
inline const ::std::string& ClientMessage_commandTypes_Name(ClientMessage_commandTypes value) {
  return ::google::protobuf::internal::NameOfEnum(
    ClientMessage_commandTypes_descriptor(), value);
}
inline bool ClientMessage_commandTypes_Parse(
    const ::std::string& name, ClientMessage_commandTypes* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ClientMessage_commandTypes>(
    ClientMessage_commandTypes_descriptor(), name, value);
}
// ===================================================================

class ClientMessage :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Message.ClientMessage) */ {
 public:
  ClientMessage();
  virtual ~ClientMessage();

  ClientMessage(const ClientMessage& from);

  inline ClientMessage& operator=(const ClientMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClientMessage(ClientMessage&& from) noexcept
    : ClientMessage() {
    *this = ::std::move(from);
  }

  inline ClientMessage& operator=(ClientMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ClientMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientMessage* internal_default_instance() {
    return reinterpret_cast<const ClientMessage*>(
               &_ClientMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ClientMessage* other);
  friend void swap(ClientMessage& a, ClientMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientMessage* New() const final {
    return CreateMaybeMessage<ClientMessage>(nullptr);
  }

  ClientMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ClientMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ClientMessage& from);
  void MergeFrom(const ClientMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ClientMessage_messageTypes messageTypes;
  static const messageTypes AUTHORIZATION =
    ClientMessage_messageTypes_AUTHORIZATION;
  static const messageTypes COMMAND =
    ClientMessage_messageTypes_COMMAND;
  static const messageTypes GROUP =
    ClientMessage_messageTypes_GROUP;
  static inline bool messageTypes_IsValid(int value) {
    return ClientMessage_messageTypes_IsValid(value);
  }
  static const messageTypes messageTypes_MIN =
    ClientMessage_messageTypes_messageTypes_MIN;
  static const messageTypes messageTypes_MAX =
    ClientMessage_messageTypes_messageTypes_MAX;
  static const int messageTypes_ARRAYSIZE =
    ClientMessage_messageTypes_messageTypes_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  messageTypes_descriptor() {
    return ClientMessage_messageTypes_descriptor();
  }
  static inline const ::std::string& messageTypes_Name(messageTypes value) {
    return ClientMessage_messageTypes_Name(value);
  }
  static inline bool messageTypes_Parse(const ::std::string& name,
      messageTypes* value) {
    return ClientMessage_messageTypes_Parse(name, value);
  }

  typedef ClientMessage_groupActionTypes groupActionTypes;
  static const groupActionTypes MESSAGE =
    ClientMessage_groupActionTypes_MESSAGE;
  static const groupActionTypes CREATE =
    ClientMessage_groupActionTypes_CREATE;
  static const groupActionTypes DELETE =
    ClientMessage_groupActionTypes_DELETE;
  static const groupActionTypes REQUEST =
    ClientMessage_groupActionTypes_REQUEST;
  static const groupActionTypes ACCEPT =
    ClientMessage_groupActionTypes_ACCEPT;
  static const groupActionTypes DECLINE =
    ClientMessage_groupActionTypes_DECLINE;
  static const groupActionTypes LEAVE =
    ClientMessage_groupActionTypes_LEAVE;
  static inline bool groupActionTypes_IsValid(int value) {
    return ClientMessage_groupActionTypes_IsValid(value);
  }
  static const groupActionTypes groupActionTypes_MIN =
    ClientMessage_groupActionTypes_groupActionTypes_MIN;
  static const groupActionTypes groupActionTypes_MAX =
    ClientMessage_groupActionTypes_groupActionTypes_MAX;
  static const int groupActionTypes_ARRAYSIZE =
    ClientMessage_groupActionTypes_groupActionTypes_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  groupActionTypes_descriptor() {
    return ClientMessage_groupActionTypes_descriptor();
  }
  static inline const ::std::string& groupActionTypes_Name(groupActionTypes value) {
    return ClientMessage_groupActionTypes_Name(value);
  }
  static inline bool groupActionTypes_Parse(const ::std::string& name,
      groupActionTypes* value) {
    return ClientMessage_groupActionTypes_Parse(name, value);
  }

  typedef ClientMessage_authorizationTypes authorizationTypes;
  static const authorizationTypes LOG_IN =
    ClientMessage_authorizationTypes_LOG_IN;
  static const authorizationTypes REGISTER_LOGIN =
    ClientMessage_authorizationTypes_REGISTER_LOGIN;
  static const authorizationTypes REGISTER_PASSWORD =
    ClientMessage_authorizationTypes_REGISTER_PASSWORD;
  static const authorizationTypes INCORRECT =
    ClientMessage_authorizationTypes_INCORRECT;
  static const authorizationTypes CORRECT =
    ClientMessage_authorizationTypes_CORRECT;
  static inline bool authorizationTypes_IsValid(int value) {
    return ClientMessage_authorizationTypes_IsValid(value);
  }
  static const authorizationTypes authorizationTypes_MIN =
    ClientMessage_authorizationTypes_authorizationTypes_MIN;
  static const authorizationTypes authorizationTypes_MAX =
    ClientMessage_authorizationTypes_authorizationTypes_MAX;
  static const int authorizationTypes_ARRAYSIZE =
    ClientMessage_authorizationTypes_authorizationTypes_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  authorizationTypes_descriptor() {
    return ClientMessage_authorizationTypes_descriptor();
  }
  static inline const ::std::string& authorizationTypes_Name(authorizationTypes value) {
    return ClientMessage_authorizationTypes_Name(value);
  }
  static inline bool authorizationTypes_Parse(const ::std::string& name,
      authorizationTypes* value) {
    return ClientMessage_authorizationTypes_Parse(name, value);
  }

  typedef ClientMessage_commandTypes commandTypes;
  static const commandTypes EXIT =
    ClientMessage_commandTypes_EXIT;
  static const commandTypes LOG_OUT =
    ClientMessage_commandTypes_LOG_OUT;
  static inline bool commandTypes_IsValid(int value) {
    return ClientMessage_commandTypes_IsValid(value);
  }
  static const commandTypes commandTypes_MIN =
    ClientMessage_commandTypes_commandTypes_MIN;
  static const commandTypes commandTypes_MAX =
    ClientMessage_commandTypes_commandTypes_MAX;
  static const int commandTypes_ARRAYSIZE =
    ClientMessage_commandTypes_commandTypes_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  commandTypes_descriptor() {
    return ClientMessage_commandTypes_descriptor();
  }
  static inline const ::std::string& commandTypes_Name(commandTypes value) {
    return ClientMessage_commandTypes_Name(value);
  }
  static inline bool commandTypes_Parse(const ::std::string& name,
      commandTypes* value) {
    return ClientMessage_commandTypes_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string login = 5;
  bool has_login() const;
  void clear_login();
  static const int kLoginFieldNumber = 5;
  const ::std::string& login() const;
  void set_login(const ::std::string& value);
  #if LANG_CXX11
  void set_login(::std::string&& value);
  #endif
  void set_login(const char* value);
  void set_login(const char* value, size_t size);
  ::std::string* mutable_login();
  ::std::string* release_login();
  void set_allocated_login(::std::string* login);

  // optional string password = 6;
  bool has_password() const;
  void clear_password();
  static const int kPasswordFieldNumber = 6;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // optional string groupName = 7;
  bool has_groupname() const;
  void clear_groupname();
  static const int kGroupNameFieldNumber = 7;
  const ::std::string& groupname() const;
  void set_groupname(const ::std::string& value);
  #if LANG_CXX11
  void set_groupname(::std::string&& value);
  #endif
  void set_groupname(const char* value);
  void set_groupname(const char* value, size_t size);
  ::std::string* mutable_groupname();
  ::std::string* release_groupname();
  void set_allocated_groupname(::std::string* groupname);

  // optional string userName = 8;
  bool has_username() const;
  void clear_username();
  static const int kUserNameFieldNumber = 8;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // optional string messageContent = 9;
  bool has_messagecontent() const;
  void clear_messagecontent();
  static const int kMessageContentFieldNumber = 9;
  const ::std::string& messagecontent() const;
  void set_messagecontent(const ::std::string& value);
  #if LANG_CXX11
  void set_messagecontent(::std::string&& value);
  #endif
  void set_messagecontent(const char* value);
  void set_messagecontent(const char* value, size_t size);
  ::std::string* mutable_messagecontent();
  ::std::string* release_messagecontent();
  void set_allocated_messagecontent(::std::string* messagecontent);

  // required .Message.ClientMessage.messageTypes messageType = 1 [default = AUTHORIZATION];
  bool has_messagetype() const;
  void clear_messagetype();
  static const int kMessageTypeFieldNumber = 1;
  ::Message::ClientMessage_messageTypes messagetype() const;
  void set_messagetype(::Message::ClientMessage_messageTypes value);

  // optional .Message.ClientMessage.groupActionTypes groupActionType = 2;
  bool has_groupactiontype() const;
  void clear_groupactiontype();
  static const int kGroupActionTypeFieldNumber = 2;
  ::Message::ClientMessage_groupActionTypes groupactiontype() const;
  void set_groupactiontype(::Message::ClientMessage_groupActionTypes value);

  // optional .Message.ClientMessage.authorizationTypes authorizationType = 3;
  bool has_authorizationtype() const;
  void clear_authorizationtype();
  static const int kAuthorizationTypeFieldNumber = 3;
  ::Message::ClientMessage_authorizationTypes authorizationtype() const;
  void set_authorizationtype(::Message::ClientMessage_authorizationTypes value);

  // optional .Message.ClientMessage.commandTypes commandType = 4;
  bool has_commandtype() const;
  void clear_commandtype();
  static const int kCommandTypeFieldNumber = 4;
  ::Message::ClientMessage_commandTypes commandtype() const;
  void set_commandtype(::Message::ClientMessage_commandTypes value);

  // @@protoc_insertion_point(class_scope:Message.ClientMessage)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr login_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::internal::ArenaStringPtr groupname_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr messagecontent_;
  int messagetype_;
  int groupactiontype_;
  int authorizationtype_;
  int commandtype_;
  friend struct ::TableStruct_Message_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ClientMessage

// required .Message.ClientMessage.messageTypes messageType = 1 [default = AUTHORIZATION];
inline bool ClientMessage::has_messagetype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ClientMessage::clear_messagetype() {
  messagetype_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::Message::ClientMessage_messageTypes ClientMessage::messagetype() const {
  // @@protoc_insertion_point(field_get:Message.ClientMessage.messageType)
  return static_cast< ::Message::ClientMessage_messageTypes >(messagetype_);
}
inline void ClientMessage::set_messagetype(::Message::ClientMessage_messageTypes value) {
  assert(::Message::ClientMessage_messageTypes_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  messagetype_ = value;
  // @@protoc_insertion_point(field_set:Message.ClientMessage.messageType)
}

// optional .Message.ClientMessage.groupActionTypes groupActionType = 2;
inline bool ClientMessage::has_groupactiontype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ClientMessage::clear_groupactiontype() {
  groupactiontype_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::Message::ClientMessage_groupActionTypes ClientMessage::groupactiontype() const {
  // @@protoc_insertion_point(field_get:Message.ClientMessage.groupActionType)
  return static_cast< ::Message::ClientMessage_groupActionTypes >(groupactiontype_);
}
inline void ClientMessage::set_groupactiontype(::Message::ClientMessage_groupActionTypes value) {
  assert(::Message::ClientMessage_groupActionTypes_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  groupactiontype_ = value;
  // @@protoc_insertion_point(field_set:Message.ClientMessage.groupActionType)
}

// optional .Message.ClientMessage.authorizationTypes authorizationType = 3;
inline bool ClientMessage::has_authorizationtype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ClientMessage::clear_authorizationtype() {
  authorizationtype_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::Message::ClientMessage_authorizationTypes ClientMessage::authorizationtype() const {
  // @@protoc_insertion_point(field_get:Message.ClientMessage.authorizationType)
  return static_cast< ::Message::ClientMessage_authorizationTypes >(authorizationtype_);
}
inline void ClientMessage::set_authorizationtype(::Message::ClientMessage_authorizationTypes value) {
  assert(::Message::ClientMessage_authorizationTypes_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  authorizationtype_ = value;
  // @@protoc_insertion_point(field_set:Message.ClientMessage.authorizationType)
}

// optional .Message.ClientMessage.commandTypes commandType = 4;
inline bool ClientMessage::has_commandtype() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ClientMessage::clear_commandtype() {
  commandtype_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::Message::ClientMessage_commandTypes ClientMessage::commandtype() const {
  // @@protoc_insertion_point(field_get:Message.ClientMessage.commandType)
  return static_cast< ::Message::ClientMessage_commandTypes >(commandtype_);
}
inline void ClientMessage::set_commandtype(::Message::ClientMessage_commandTypes value) {
  assert(::Message::ClientMessage_commandTypes_IsValid(value));
  _has_bits_[0] |= 0x00000100u;
  commandtype_ = value;
  // @@protoc_insertion_point(field_set:Message.ClientMessage.commandType)
}

// optional string login = 5;
inline bool ClientMessage::has_login() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientMessage::clear_login() {
  login_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& ClientMessage::login() const {
  // @@protoc_insertion_point(field_get:Message.ClientMessage.login)
  return login_.GetNoArena();
}
inline void ClientMessage::set_login(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  login_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Message.ClientMessage.login)
}
#if LANG_CXX11
inline void ClientMessage::set_login(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  login_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Message.ClientMessage.login)
}
#endif
inline void ClientMessage::set_login(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  login_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Message.ClientMessage.login)
}
inline void ClientMessage::set_login(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  login_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Message.ClientMessage.login)
}
inline ::std::string* ClientMessage::mutable_login() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:Message.ClientMessage.login)
  return login_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientMessage::release_login() {
  // @@protoc_insertion_point(field_release:Message.ClientMessage.login)
  if (!has_login()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return login_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientMessage::set_allocated_login(::std::string* login) {
  if (login != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  login_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), login);
  // @@protoc_insertion_point(field_set_allocated:Message.ClientMessage.login)
}

// optional string password = 6;
inline bool ClientMessage::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClientMessage::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& ClientMessage::password() const {
  // @@protoc_insertion_point(field_get:Message.ClientMessage.password)
  return password_.GetNoArena();
}
inline void ClientMessage::set_password(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Message.ClientMessage.password)
}
#if LANG_CXX11
inline void ClientMessage::set_password(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Message.ClientMessage.password)
}
#endif
inline void ClientMessage::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Message.ClientMessage.password)
}
inline void ClientMessage::set_password(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Message.ClientMessage.password)
}
inline ::std::string* ClientMessage::mutable_password() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:Message.ClientMessage.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientMessage::release_password() {
  // @@protoc_insertion_point(field_release:Message.ClientMessage.password)
  if (!has_password()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return password_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientMessage::set_allocated_password(::std::string* password) {
  if (password != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:Message.ClientMessage.password)
}

// optional string groupName = 7;
inline bool ClientMessage::has_groupname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ClientMessage::clear_groupname() {
  groupname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::std::string& ClientMessage::groupname() const {
  // @@protoc_insertion_point(field_get:Message.ClientMessage.groupName)
  return groupname_.GetNoArena();
}
inline void ClientMessage::set_groupname(const ::std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  groupname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Message.ClientMessage.groupName)
}
#if LANG_CXX11
inline void ClientMessage::set_groupname(::std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  groupname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Message.ClientMessage.groupName)
}
#endif
inline void ClientMessage::set_groupname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  groupname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Message.ClientMessage.groupName)
}
inline void ClientMessage::set_groupname(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  groupname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Message.ClientMessage.groupName)
}
inline ::std::string* ClientMessage::mutable_groupname() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:Message.ClientMessage.groupName)
  return groupname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientMessage::release_groupname() {
  // @@protoc_insertion_point(field_release:Message.ClientMessage.groupName)
  if (!has_groupname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return groupname_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientMessage::set_allocated_groupname(::std::string* groupname) {
  if (groupname != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  groupname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), groupname);
  // @@protoc_insertion_point(field_set_allocated:Message.ClientMessage.groupName)
}

// optional string userName = 8;
inline bool ClientMessage::has_username() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ClientMessage::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::std::string& ClientMessage::username() const {
  // @@protoc_insertion_point(field_get:Message.ClientMessage.userName)
  return username_.GetNoArena();
}
inline void ClientMessage::set_username(const ::std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Message.ClientMessage.userName)
}
#if LANG_CXX11
inline void ClientMessage::set_username(::std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Message.ClientMessage.userName)
}
#endif
inline void ClientMessage::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Message.ClientMessage.userName)
}
inline void ClientMessage::set_username(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Message.ClientMessage.userName)
}
inline ::std::string* ClientMessage::mutable_username() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:Message.ClientMessage.userName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientMessage::release_username() {
  // @@protoc_insertion_point(field_release:Message.ClientMessage.userName)
  if (!has_username()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return username_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientMessage::set_allocated_username(::std::string* username) {
  if (username != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:Message.ClientMessage.userName)
}

// optional string messageContent = 9;
inline bool ClientMessage::has_messagecontent() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ClientMessage::clear_messagecontent() {
  messagecontent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::std::string& ClientMessage::messagecontent() const {
  // @@protoc_insertion_point(field_get:Message.ClientMessage.messageContent)
  return messagecontent_.GetNoArena();
}
inline void ClientMessage::set_messagecontent(const ::std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  messagecontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Message.ClientMessage.messageContent)
}
#if LANG_CXX11
inline void ClientMessage::set_messagecontent(::std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  messagecontent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Message.ClientMessage.messageContent)
}
#endif
inline void ClientMessage::set_messagecontent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  messagecontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Message.ClientMessage.messageContent)
}
inline void ClientMessage::set_messagecontent(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  messagecontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Message.ClientMessage.messageContent)
}
inline ::std::string* ClientMessage::mutable_messagecontent() {
  _has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_mutable:Message.ClientMessage.messageContent)
  return messagecontent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientMessage::release_messagecontent() {
  // @@protoc_insertion_point(field_release:Message.ClientMessage.messageContent)
  if (!has_messagecontent()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return messagecontent_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientMessage::set_allocated_messagecontent(::std::string* messagecontent) {
  if (messagecontent != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  messagecontent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), messagecontent);
  // @@protoc_insertion_point(field_set_allocated:Message.ClientMessage.messageContent)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Message

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Message::ClientMessage_messageTypes> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Message::ClientMessage_messageTypes>() {
  return ::Message::ClientMessage_messageTypes_descriptor();
}
template <> struct is_proto_enum< ::Message::ClientMessage_groupActionTypes> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Message::ClientMessage_groupActionTypes>() {
  return ::Message::ClientMessage_groupActionTypes_descriptor();
}
template <> struct is_proto_enum< ::Message::ClientMessage_authorizationTypes> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Message::ClientMessage_authorizationTypes>() {
  return ::Message::ClientMessage_authorizationTypes_descriptor();
}
template <> struct is_proto_enum< ::Message::ClientMessage_commandTypes> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Message::ClientMessage_commandTypes>() {
  return ::Message::ClientMessage_commandTypes_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_Message_2eproto
